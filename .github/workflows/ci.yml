#
# https://docs.github.com/en/actions/reference
# https://github.com/actions
#

name: CI

on:
  pull_request: {}
  push: {}

jobs:

  pylint:
    name: "PyLint"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test:
          - {PY: "3.8", TOXENV: "lint"}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Python ${{matrix.test.PY}}"
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.test.PY}}

      - name: "Install tox"
        run: python -m pip -q install tox

      - name: "Test"
        env:
           TOXENV: ${{matrix.test.TOXENV}}
        run: python -m tox -r

  no_database:
    name: "${{matrix.test.osname}} + Python ${{matrix.test.PY}} ${{matrix.test.arch}}"
    runs-on: ${{matrix.test.os}}
    strategy:
      matrix:
        test:
          - {os: "ubuntu-18.04", osname: "Ubuntu 18.04", PY: "3.6", TOXENV: "py36", arch: "x64"}
          - {os: "ubuntu-18.04", osname: "Ubuntu 18.04", PY: "3.7", TOXENV: "py37", arch: "x64"}
          - {os: "ubuntu-20.04", osname: "Ubuntu 20.04", PY: "3.8", TOXENV: "py38", arch: "x64"}
          - {os: "ubuntu-20.04", osname: "Ubuntu 20.04", PY: "3.9", TOXENV: "py39", arch: "x64"}
          - {os: "macos-10.15", osname: "MacOS 10.15", PY: "3.8", TOXENV: "py38", arch: "x64"}
          - {os: "windows-2016", osname: "Windows 2016", PY: "3.6", TOXENV: "py36", arch: "x86"}
          - {os: "windows-2016", osname: "Windows 2016", PY: "3.7", TOXENV: "py37", arch: "x64"}
          - {os: "windows-2019", osname: "Windows 2019", PY: "3.8", TOXENV: "py38", arch: "x86"}
          - {os: "windows-2019", osname: "Windows 2019", PY: "3.9", TOXENV: "py39", arch: "x64"}
          - {os: "ubuntu-20.04", osname: "Ubuntu 20.04", PY: "pypy-3.6", TOXENV: "pypy36", arch: "x64"}
          - {os: "ubuntu-20.04", osname: "Ubuntu 20.04", PY: "pypy-3.7", TOXENV: "pypy37", arch: "x64"}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Python ${{matrix.test.PY}}"
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.test.PY}}
          architecture: ${{matrix.test.arch}}


      - name: "Install tox"
        run: python -m pip -q install tox

      - name: "Build"
        run: python setup.py build

      - name: "Test"
        env:
           TOXENV: ${{matrix.test.TOXENV}}
        run: python -m tox -r -- --color=yes

  database:
    #if: false
    #name: "database test (disabled)"
    name: "PostgreSQL ${{matrix.test.PG}} + Python ${{matrix.test.PY}}"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        test:
          - {PY: "3.8", PG: "12", TOXENV: "py38"}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Python ${{matrix.test.PY}}"
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.test.PY}}

      - name: "Install tox"
        run: |
          python -m pip -q install tox

      - name: "InstallDB"
        run: |
          echo "::group::apt-get-update"
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main ${{matrix.test.PG}}" \
          | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo -nH apt-get -q update
          echo "::endgroup::"

          echo "::group::apt-get-install"

          # disable new cluster creation
          sudo -nH mkdir -p /etc/postgresql-common/createcluster.d
          echo "create_main_cluster = false" | sudo -nH tee /etc/postgresql-common/createcluster.d/no-main.conf

          sudo -nH apt-get -qyu install postgresql-${{matrix.test.PG}}
          echo "::endgroup::"

          # tune environment
          echo "/usr/lib/postgresql/${{matrix.test.PG}}/bin" >> $GITHUB_PATH
          echo "PGHOST=/tmp" >> $GITHUB_ENV

      - name: "StartDB"
        run: |
          rm -rf data log
          mkdir -p log
          LANG=C initdb data
          sed -ri -e "s,^[# ]*(unix_socket_directories).*,\\1='/tmp'," data/postgresql.conf
          pg_ctl -D data -l log/pg.log start || { cat log/pg.log ; exit 1; }
          sleep 1
          createdb testdb

      - name: "Test"
        env:
          TOXENV: ${{matrix.test.TOXENV}}
          TEST_DB: dbname=testdb host=/tmp
        run: |
          python -m tox -r -- --color=yes

      - name: "StopDB"
        run: |
          pg_ctl -D data stop
          rm -rf data log /tmp/.s.PGSQL*

  test_linux_wheels:
    name: "Wheel: manylinux2014"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - run: |
          python setup.py sdist
          mv dist sdist
      - uses: "docker://quay.io/pypa/manylinux2014_x86_64:latest"
        with: {entrypoint: "./.github/workflows/manylinux.sh"}
      - uses: "docker://quay.io/pypa/manylinux2014_i686:latest"
        with: {entrypoint: "./.github/workflows/manylinux.sh"}
      - uses: actions/upload-artifact@v2
        with: {name: "dist", path: "dist"}

  test_other_wheels:
    name: "Wheel: ${{matrix.sys.name}}-${{matrix.sys.pyarch}}-${{matrix.pyver}}"
    runs-on: ${{matrix.sys.os}}
    strategy:
      matrix:
        sys:
          - {os: "macos-10.15", name: "MacOS 10.15", pyarch: "x64"}
          - {os: "windows-2019", name: "Windows 2019", pyarch: "x86"}
          - {os: "windows-2019", name: "Windows 2019", pyarch: "x64"}
        pyver: ["3.6"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with: {architecture: "${{matrix.sys.pyarch}}", python-version: "${{matrix.pyver}}"}
      - run: |
          python setup.py sdist
          mv dist sdist
      - name: "Build"
        shell: bash
        run: |
          pip install --disable-pip-version-check -U wheel
          pip wheel -v --disable-pip-version-check --build-option --py-limited-api=cp36 -w dist sdist/*.tar.gz
          ls -l dist
      - uses: actions/upload-artifact@v2
        with: {name: "dist", path: "dist"}

