#
# https://docs.github.com/en/actions/reference
# https://github.com/actions
#

name: REL

on:
  push:
    tags: ["v[0-9]*"]

jobs:
  sdist:
    name: "Build source package"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with: {python-version: "3.8"}
    - run: python setup.py sdist
    - uses: actions/upload-artifact@v2
      with: {name: "dist", path: "dist"}

  linux_wheels:
    name: "Wheel: manylinux1"
    needs: [sdist]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with: {name: "dist", path: "sdist"}
    - uses: docker://quay.io/pypa/manylinux1_x86_64
      with: {entrypoint: "./.github/workflows/manylinux.sh"}
    - uses: docker://quay.io/pypa/manylinux1_i686
      with: {entrypoint: "./.github/workflows/manylinux.sh"}
    - uses: actions/upload-artifact@v2
      with: {name: "dist", path: "dist"}

  other_wheels:
    name: "Wheel: ${{matrix.sys.name}}-${{matrix.sys.arch}}-${{matrix.python-version}}"
    needs: [sdist]
    runs-on: ${{matrix.sys.os}}
    strategy:
      fail-fast: false
      matrix:
        sys:
          - {os: "macos-10.15", name: "MacOS 10.15", arch: "x64"}
          - {os: "windows-2019", name: "Windows 2019", arch: "x86"}
          - {os: "windows-2019", name: "Windows 2019", arch: "x64"}
        python-version: ["3.6", "3.7", "3.8"]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with: {architecture: "${{matrix.sys.arch}}", python-version: "${{matrix.python-version}}"}
    - uses: actions/download-artifact@v2
      with: {name: "dist", path: "sdist"}
    - name: "Build"
      shell: bash
      run: |
        pip install --disable-pip-version-check -U wheel
        pip wheel --disable-pip-version-check -w dist sdist/*.tar.gz
    - uses: actions/upload-artifact@v2
      with: {name: "dist", path: "dist"}

  publish:
    name: "Publish"
    runs-on: ubuntu-20.04
    needs: [linux_wheels, other_wheels]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with: {python-version: "3.8"}
    - uses: actions/download-artifact@v2
      with: {name: "dist", path: "dist"}
    - name: "Prepare"
      run: |
        PACKAGE=$(python setup.py --name)
        VERSION=$(python setup.py --version)
        TGZ="${PACKAGE}-${VERSION}.tar.gz"
        PRERELEASE="false"
        DRAFT="false"
        if echo "${VERSION}" | grep -qE '(a|b|rc)'; then PRERELEASE="true"; fi
        if echo "${VERSION}" | grep -qE '(dev|tmp)'; then DRAFT="true"; fi
        test "${{github.ref}}" = "refs/tags/v${VERSION}" || { echo "ERR: tag mismatch"; exit 1; }
        test -f "dist/${TGZ}" || { echo "ERR: sdist failed"; exit 1; }
        echo "::set-env name=PACKAGE::${PACKAGE}"
        echo "::set-env name=VERSION::${VERSION}"
        echo "::set-env name=TGZ::${TGZ}"
        echo "::set-env name=PRERELEASE::${PRERELEASE}"
        echo "::set-env name=DRAFT::${DRAFT}"
        sudo -nH apt-get -u -y install pandoc
        pandoc --version
        mkdir -p tmp
        make -s shownote > tmp/note.md
        cat tmp/note.md

    - name: "Create release"
      id: github_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{github.ref}}
        release_name: ${{env.PACKAGE}} v${{env.VERSION}}
        body_path: tmp/note.md
        prerelease: ${{env.PRERELEASE}}
        draft: ${{env.DRAFT}}

    - name: "Upload to Github"
      id: github_upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.github_release.outputs.upload_url}}
        asset_path: dist/${{env.TGZ}}
        asset_name: ${{env.TGZ}}
        asset_content_type: application/x-gzip

    - name: "Upload to PYPI"
      id: pypi_upload
      env:
        PYPI_TOKEN: ${{secrets.PYPI_TOKEN}}
        PYPI_TEST_TOKEN: ${{secrets.PYPI_TEST_TOKEN}}
      run: |
        pip install --disable-pip-version-check -U twine
        ls -l dist
        if test "${DRAFT}" = "false"; then
          python -m twine upload -u __token__ -p ${PYPI_TOKEN} \
            --repository pypi --disable-progress-bar dist/*
        else
          python -m twine upload -u __token__ -p ${PYPI_TEST_TOKEN} \
            --repository testpypi --disable-progress-bar dist/*
        fi

